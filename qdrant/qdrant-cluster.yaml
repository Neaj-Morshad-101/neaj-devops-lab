apiVersion: v1
kind: Service
metadata:
  name: qdrant-cluster-pods
spec:
  clusterIP: None
  selector:
    app: qdrant-cluster
  ports:
    - name: http
      port: 6333
    - name: grpc
      port: 6334
    - name: p2p
      port: 6335
---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-cluster
spec:
  type: ClusterIP
  selector:
    app: qdrant-cluster
  ports:
    - name: http
      port: 6333
      targetPort: 6333
    - name: grpc
      port: 6334
      targetPort: 6334
---
#         --bootstrap <URI>
#             Uri of the peer to bootstrap from in case of multi-peer deployment. If not specified -
#             this peer will be considered as a first in a new deployment

#         --uri <URI>
#             Uri of this peer. Other peers should be able to reach it by this uri.

#             This value has to be supplied if this is the first peer in a new deployment.

#             In case this is not the first peer and it bootstraps the value is optional. If not
#             supplied then qdrant will take internal grpc port from config and derive the IP address
#             of this peer on bootstrap peer (receiving side)

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant-cluster
spec:
  serviceName: "qdrant-cluster-pods"
  replicas: 3
  selector:
    matchLabels:
      app: qdrant-cluster
  template:
    metadata:
      labels:
        app: qdrant-cluster
    spec:
      containers:
        - name: qdrant
          image: qdrant/qdrant:latest
          # This command tells Qdrant to use our custom config file.
          command:
            - /bin/sh
            - -c
            - |
              set -e
              # Full DNS for this pod (use your actual namespace if not 'default')
              MY_URI="http://${POD_NAME}.qdrant-cluster-pods.${POD_NAMESPACE}.svc.cluster.local:6335"
              # Bootstrap from first node
              BOOTSTRAP_URI="http://qdrant-cluster-0.qdrant-cluster-pods.${POD_NAMESPACE}.svc.cluster.local:6335"

              echo "MY_URI: $MY_URI"
              echo "BOOTSTRAP_URI: $BOOTSTRAP_URI"
              
              if [ "${POD_NAME}" = "qdrant-cluster-0" ]; then
                echo "Bootstrapping as first node with BOOTSTRAP_URI: $BOOTSTRAP_URI"
                echo "Executing command: ./qdrant --config-path /qdrant/config/config.yaml --uri \"$MY_URI\" --bootstrap \"$MY_URI\""
                exec ./qdrant --config-path /qdrant/config/config.yaml --uri "$MY_URI" --bootstrap "$MY_URI"
              else
                # Other nodes: bootstrap from first node
                echo "Joining cluster with URI: $MY_URI, bootstrap: $BOOTSTRAP_URI"
                echo "Executing command: ./qdrant --config-path /qdrant/config/config.yaml --uri \"$MY_URI\" --bootstrap \"$BOOTSTRAP_URI\""
                exec ./qdrant --config-path /qdrant/config/config.yaml --uri "$MY_URI" --bootstrap "$BOOTSTRAP_URI"
              fi
            # - "./qdrant"
            # - "--config-path"
            # - "/qdrant/config/config.yaml"
            # - "--uri"
            # - "qdrant-cluster-0.qdrant-cluster-pods:6335"

          # Environment variables for dynamic pod identity
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 6333
              name: http
            - containerPort: 6334
              name: grpc
            - containerPort: 6335
              name: p2p
          volumeMounts:
            - name: qdrant-storage
              mountPath: /qdrant/storage
            # Mount the ConfigMap as a volume.
            - name: qdrant-config-volume
              mountPath: /qdrant/config
      volumes:
        # Define the volume based on our ConfigMap.
        - name: qdrant-config-volume
          configMap:
            name: qdrant-cluster-config
  volumeClaimTemplates:
    - metadata:
        name: qdrant-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi