# milvus-standalone.yaml

# This is a best practice for real-world scenarios.
# It creates an isolated space for all our Milvus components.
apiVersion: v1
kind: Namespace
metadata:
  name: milvus-standalone
# ---
# # 1. CONFIGURATION FOR MILVUS
# # A ConfigMap holds the milvus.yaml configuration file.
# # Milvus will read this to know where to find etcd and minio.
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: milvus-config
#   namespace: milvus-standalone
# data:
#   milvus.yaml: |
#     # Add this new section for common configurations
#     common:
#       localStorage:
#         path: /var/lib/milvus

#     etcd:
#       endpoints:
#         - milvus-etcd:2379  # The name of the etcd service we will create
#     minio:
#       address: milvus-minio # The name of the minio service we will create
#       port: 9000
#       accessKeyID: minioadmin
#       secretAccessKey: minioadmin
#       useSSL: false
---
# 2. DEPENDENCY: ETCD (METADATA STORAGE)
# We use a StatefulSet because etcd needs stable network identity and storage.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: milvus-etcd
  namespace: milvus-standalone
spec:
  serviceName: milvus-etcd-headless
  replicas: 1
  selector:
    matchLabels:
      app: milvus
      component: etcd
  template:
    metadata:
      labels:
        app: milvus
        component: etcd
    spec:
      containers:
      - name: etcd
        image: quay.io/coreos/etcd:v3.5.5
        command:
        - /usr/local/bin/etcd
        - --name=etcd-0
        - --listen-client-urls=http://0.0.0.0:2379
        - --advertise-client-urls=http://milvus-etcd-0.milvus-etcd-headless:2379
        - --data-dir=/etcd-data
        ports:
        - containerPort: 2379
        volumeMounts:
        - name: etcd-data
          mountPath: /etcd-data
  volumeClaimTemplates:
  - metadata:
      name: etcd-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
# Service to give etcd a stable network address.
apiVersion: v1
kind: Service
metadata:
  name: milvus-etcd
  namespace: milvus-standalone
spec:
  selector:
    app: milvus
    component: etcd
  ports:
  - port: 2379
    targetPort: 2379
---
# 3. DEPENDENCY: MINIO (OBJECT STORAGE)
# We use a Deployment as we only need one simple instance for standalone mode.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-minio
  namespace: milvus-standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus
      component: minio
  template:
    metadata:
      labels:
        app: milvus
        component: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2023-03-20T20-16-18Z
        command:
        - /bin/bash
        - -c
        - minio server /data --console-address :9001
        env:
        - name: MINIO_ROOT_USER
          value: "minioadmin"
        - name: MINIO_ROOT_PASSWORD
          value: "minioadmin"
        ports:
        - containerPort: 9000 # API port
        - containerPort: 9001 # Console port
        volumeMounts:
        - name: minio-data
          mountPath: /data
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-pvc
---
# Request storage (a PVC) for MinIO's data.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: milvus-standalone
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
# Service to give MinIO a stable network address.
apiVersion: v1
kind: Service
metadata:
  name: milvus-minio
  namespace: milvus-standalone
spec:
  selector:
    app: milvus
    component: minio
  ports:
  - name: api
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
---
# 4. THE MILVUS STANDALONE DEPLOYMENT
# This is the main application. It's stateless because its state is in etcd and minio.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-standalone
  namespace: milvus-standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus
      component: standalone
  template:
    metadata:
      labels:
        app: milvus
        component: standalone
    spec:
      containers:
      - name: milvus
        image: milvusdb/milvus:v2.6.1
        command: ["/tini", "--", "/milvus/bin/milvus", "run", "standalone"]
        env:
        - name: ETCD_ENDPOINTS
          value: milvus-etcd:2379
        - name: MINIO_ADDRESS
          value: milvus-minio:9000
        - name: COMMON_STORAGETYPE
          value: "local"
        ports:
        - containerPort: 19530 # gRPC port
        - containerPort: 9091  # Metrics port
        volumeMounts:
        - name: milvus-config-volume
          mountPath: /milvus/configs/milvus.yaml
          subPath: milvus.yaml
      volumes:
      - name: milvus-config-volume
        configMap:
          name: milvus-config
---
# 5. THE MILVUS SERVICE
# This exposes the Milvus gRPC port so we can connect to it.
apiVersion: v1
kind: Service
metadata:
  name: milvus-standalone-service
  namespace: milvus-standalone
spec:
  selector:
    app: milvus
    component: standalone
  ports:
  - name: grpc
    port: 19530
    targetPort: 19530