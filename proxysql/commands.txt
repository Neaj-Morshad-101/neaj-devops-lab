MySQL Backend: 
kubectl exec -it -n demo mysql-server-0 -- bash
root@mysql-server-0:/# mysql -uroot -p$MYSQL_ROOT_PASSWORD

// create user 
create user `test`@'%' identified by 'pass';
CREATE USER 'test'@'%' IDENTIFIED WITH mysql_native_password BY 'pass';      -- for 8.4.0 This ensures the stored hash uses the older *â€¦ SHA-1 format that ProxySQL fully supports .
grant all privileges on test.* to 'test'@'%';
flush privileges;


// create database
create database test;
use test;
show tables;
create table testtb(name varchar(103), primary key(name));

// mysql.user
SELECT HEX(authentication_string) FROM mysql.user;
SELECT user, authentication_string FROM mysql.user;

// status
select * FROM performance_schema.replication_group_members;

// mariadb
MariaDB Replication	SHOW SLAVE STATUS\G
MariaDB Galera	SHOW STATUS LIKE 'wsrep%';






// ProxySQL Cluster 
kubectl exec -it -n demo mysql-proxy-0 -- bash
proxysql@proxy-server-0:/$ 
mysql -uadmin -padmin -h127.0.0.1 -P6032 --prompt="ProxySQLAdmin > "
ProxySQLAdmin >

// mysql servers 
select * from mysql_servers;
select * from runtime_mysql_servers;
LOAD MYSQL SERVERS TO RUNTIME; 
SAVE MYSQL SERVERS TO DISK;

// mysql users 
select username, password from mysql_users;
select username from mysql_users;
select password from mysql_users;
select * from mysql_users; 
INSERT INTO mysql_users (username, password, active, default_hostgroup, backend, frontend, transaction_persistent) 
             VALUES ('test', 'pass', 1, 2, 1, 1, 1);
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS TO DISK;
SELECT username, default_hostgroup, backend, frontend FROM mysql_users WHERE username='test';

// tables 
SHOW TABLES FROM main;

// hostgroups configuration
select * from mysql_group_replication_hostgroups;
select * from mysql_galera_hostgroups;
mysql_galera_hostgroups: In memory config.
runtime_mysql_galera_hostgroups: Runtime config.
disk.mysql_galera_hostgroups: Persistent config.

// stats 
# check on all proxysql pods (svc may connect to different proxysql pod)
select hostgroup,srv_host, Queries from stats_mysql_connection_pool; 
# is used to check per-server usage statistics in ProxySQL
select hostname, Queries, Client_Connections_created from stats_proxysql_servers_metrics; 
SELECT * FROM stats.stats_mysql_connection_pool;
SELECT * FROM stats.stats_mysql_users;
SELECT * FROM stats.stats_mysql_query_digest;




Ubuntu Client: 
kubectl exec -it -n demo ubuntu-bb47d8d6c-c5l5g -- bash
apt update
apt install mysql-client -y
mysql -utest -ppass -hmysql-proxy.demo.svc -P6033
mysql> select @@hostname 

# insert data
create database test;
create table testtb(name varchar(103), primary key(name));
show databases;
use test;
show tables;
insert into testtb(name) values("Kim Torres");
insert into testtb(name) values("Tony SoFua");
select * from testtb;

# Global variables
select * from global_variables where variable_name like '%monitor_galera%';
    +----------------------------------------------------+----------------+
    | variable_name                                      | variable_value |
    +----------------------------------------------------+----------------+
    | mysql-monitor_galera_healthcheck_interval          | 1000           |
    | mysql-monitor_galera_healthcheck_timeout           | 600            |
    | mysql-monitor_galera_healthcheck_max_timeout_count | 3              |
    +----------------------------------------------------+----------------+

select * from mysql_galera_hostgroups\G
*************************** 1. row ***************************
       writer_hostgroup: 0
backup_writer_hostgroup: 2
       reader_hostgroup: 1
      offline_hostgroup: 4
                 active: 1
            max_writers: 1
  writer_is_also_reader: 1
max_transactions_behind: 100


// Load Balancing Test 
cat << 'EOF' > run_query.sh
#!/usr/bin/env bash

USER="test"
PASS="pass"
HOST="mysql-proxy843.demo.svc"
PORT=6033
COUNT=10000

for i in $(seq 1 $COUNT); do
  mysql -u"$USER" -p"$PASS" -h"$HOST" -P"$PORT" \
    -e "SELECT * FROM testtb;" >/dev/null 2>&1
done

echo "Executed SELECT on testtb $COUNT times."
EOF

cat run_query.sh
chmod +x run_query.sh
./run_query.sh