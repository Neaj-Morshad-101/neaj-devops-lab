MySQL Backend: 
kubectl exec -it -n demo mysql-server-0 -- bash
mysql -uroot -p$MYSQL_ROOT_PASSWORD

// create user 
create user `test`@'%' identified by 'pass';
grant all privileges on test.* to 'test'@'%';
flush privileges;
CREATE USER 'test3'@'%' IDENTIFIED WITH mysql_native_password BY 'pass';      -- for 8.4.0 This ensures the stored hash uses the older *â€¦ SHA-1 format that ProxySQL fully supports .
create user `test2`@'%' identified by 'pass';
grant all privileges on test.* to 'test2'@'%';
flush privileges;


// create database
create database test;
use test;
show tables;
create table testtb(name varchar(103), primary key(name));

// mysql.user
SELECT user, authentication_string FROM mysql.user;
SELECT user, HEX(authentication_string) FROM mysql.user;

// status
select * FROM performance_schema.replication_group_members;

// mariadb
MariaDB Replication	SHOW SLAVE STATUS\G
MariaDB Galera	SHOW STATUS LIKE 'wsrep%';






// ProxySQL Cluster 
kubectl exec -it -n demo mysql-proxy-0 -- bash
proxysql@proxy-server-0:/$ 
mysql -uadmin -padmin -h127.0.0.1 -P6032 --prompt="ProxySQLAdmin > "
ProxySQLAdmin >

// mysql servers 
select * from mysql_servers;
select * from runtime_mysql_servers;
LOAD MYSQL SERVERS TO RUNTIME; 
SAVE MYSQL SERVERS TO DISK;

// mysql users 
select username, password from mysql_users;
select username, password from runtime_mysql_users;
SELECT username, HEX(password) FROM mysql_users;
select username from mysql_users;
select password from mysql_users;
select * from mysql_users; 

DELETE FROM mysql_users WHERE username = 'test2';
INSERT INTO mysql_users (username, password, active, default_hostgroup, backend, frontend, transaction_persistent) 
             VALUES ('test2', 'pass', 1, 2, 1, 1, 1);
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS TO DISK;

INSERT INTO mysql_users (username, password, active, default_hostgroup, backend, frontend, transaction_persistent) VALUES ('test2', CACHING_SHA2_PASSWORD('pass'), 1, 2, 1, 1, 1);

LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS TO DISK;
SELECT username, default_hostgroup, backend, frontend FROM mysql_users;

// tables 
SHOW TABLES FROM main;

// hostgroups configuration
select * from mysql_group_replication_hostgroups;
select * from mysql_galera_hostgroups;
mysql_galera_hostgroups: In memory config.
runtime_mysql_galera_hostgroups: Runtime config.
disk.mysql_galera_hostgroups: Persistent config.

// stats 
# check on all proxysql pods (svc may connect to different proxysql pod)
select hostgroup,srv_host, Queries from stats_mysql_connection_pool; 
# is used to check per-server usage statistics in ProxySQL
select hostname, Queries, Client_Connections_created from stats_proxysql_servers_metrics; 
SELECT * FROM stats.stats_mysql_connection_pool;
SELECT * FROM stats.stats_mysql_users;
SELECT * FROM stats.stats_mysql_query_digest;

// monitor
select * from monitor.mysql_server_connect_log order by time_start_us desc;
select * from monitor.mysql_server_ping_log order by time_start_us desc limit 6;

// tls 
SELECT * FROM global_variables WHERE variable_name LIKE 'mysql-ssl%' OR variable_name = 'mysql-have_ssl';


caching_sha2_passwords: 
SELECT variable_name, variable_value FROM global_variables
          WHERE variable_name IN (
                   'mysql-default_authentication_plugin',
                   'mysql-have_ssl',
                   'mysql-ssl_cert',
                   'mysql-ssl_key',
                   'mysql-ssl_ca'
          );
SET mysql-default_authentication_plugin = 'caching_sha2_password';
LOAD MYSQL VARIABLES TO RUNTIME;      SAVE MYSQL VARIABLES TO DISK;
mysql-server: SELECT HEX(authentication_string) FROM mysql.user WHERE user='$USERNAME';
proxysql: UPDATE mysql_users SET password=UNHEX('$HEX_PASSWORD') WHERE username='$USERNAME';
verify: SELECT SUBSTR(password,0,5) AS pass_start, LENGTH(password) AS pass_length FROM mysql_users WHERE username='$USERNAME';

# Global variables
select * from global_variables where variable_name like '%monitor_galera%';







Ubuntu Client: 
kubectl exec -it -n demo ubuntu-bb47d8d6c-c5l5g -- bash
apt update
apt install mysql-client -y
mysql -utest -ppass -hmysql-proxy.demo.svc -P6033
select @@hostname -- see which host you are connected to 

# insert data
create database test;
create table testtb(name varchar(103), primary key(name));
show databases;
use test;
show tables;
insert into testtb(name) values("Kim Torres");
insert into testtb(name) values("Tony SoFua");
select * from testtb;


// Load Balancing Test 
cat << 'EOF' > run_query.sh
#!/usr/bin/env bash
set -euo pipefail

USER="test"
PASS="pass"
HOST="mysql-proxy9.demo.svc"
PORT=6033
COUNT=3000

for i in $(seq 1 $COUNT); do
  if ! output=$(mysql -u"$USER" -p"$PASS" -h"$HOST" -P"$PORT" \
    -D test \
    -e "SELECT * FROM testtb;" 2>&1)
  then
    echo >&2 "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR at iteration $i:"
    echo >&2 "$output"
    exit 1
  fi
done

echo "Executed SELECT on testtb $COUNT times."
EOF

cat run_query.sh
chmod +x run_query.sh
./run_query.sh






Kubernetes:
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./ca.key -out ./ca.crt -subj "/CN=proxysql/O=kubedb"
kubectl create secret tls proxy-ca --cert=ca.crt --key=ca.key --namespace=demo



